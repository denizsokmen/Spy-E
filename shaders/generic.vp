#version 330 core

layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;
layout(location = 4) in vec3 tangent;
layout(location = 5) in vec3 bitangent;


uniform mat4 MVP;
uniform mat3 NormalMatrix;
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelViewMatrix;




out vec2 UV;
out mat3 TBN;
out vec4 fragVert;


void main() {
    gl_Position = MVP * vertexPosition_modelspace;
	fragVert = vertexPosition_modelspace;


    vec3 n = normalize(NormalMatrix * normal);
    vec3 t = normalize(NormalMatrix * tangent);
	vec3 b = normalize(NormalMatrix * cross( normal, tangent )); 

    mat3 tbnMatrix = transpose(mat3(t,b,n));

    UV = uv;
	TBN = tbnMatrix;

}