#version 330 core

layout(location = 0) in vec4 inVertex;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;
layout(location = 4) in vec3 tangent;
layout(location = 5) in vec3 bitangent;

layout(location = 6) in vec4 boneindex;
layout(location = 7) in vec4 weight;

uniform mat4 MVP;
uniform mat3 NormalMatrix;
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelViewMatrix;


uniform mat4 Bones[150];


out vec2 UV;
out mat3 TBN;
out vec4 fragVert;
out vec3 viewDir;

void main() {

    mat4 newv;
    int ind;
    ind=int(boneindex.x);
    newv = (Bones[ind]) * weight.x;
    ind=int(boneindex.y);
    newv += (Bones[ind]) * weight.y;
    ind=int(boneindex.z);
    newv += (Bones[ind]) * weight.z;
    ind=int(boneindex.w);
    newv += (Bones[ind]) * (1.0 - weight.x - weight.y - weight.z);

    vec4 vertexPosition_modelspace = newv * inVertex;
	fragVert = vertexPosition_modelspace;
    vec3 newNormal = (newv * vec4(normal, 0.0)).xyz;
    vec3 newTangent = (newv * vec4(tangent, 0.0)).xyz;


    gl_Position = MVP * vertexPosition_modelspace;
	vec4 posEye = ModelViewMatrix * vertexPosition_modelspace;


    vec3 n = normalize(NormalMatrix * newNormal);
    vec3 t = normalize(NormalMatrix * newTangent);
	vec3 b = normalize(NormalMatrix * cross( newNormal, newTangent )); 

    mat3 tbnMatrix = transpose(mat3(t,b,n));

	viewDir = TBN * -posEye.xyz;
    UV = uv;
	TBN = tbnMatrix;

}